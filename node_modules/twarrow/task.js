// Library code specifically for task api code
var Arrow = require('arrow'),
    Q = require('q'),
    twarrow = require('twarrow');

// Helpers

// CRUD
module.exports.readAll = function() {
    // Gets a list of all tasks
    var deferred = Q.defer();

    var model = Arrow.getModel('appc.mysql.eolmig/Task');
    var query = 'SELECT * FROM Task';
    model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'task.js>readAll',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'task.js>readAll',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'task.js>readAll', 
            data: results });
    });

    return deferred.promise;
};


module.exports.create = function(task) {
    // Creates a single task
    var deferred = Q.defer();

    var model = Arrow.getModel('appc.mysql.eolmig/Task');
    var query = 'INSERT INTO Task (scriptName, createdBy, parameter1, parameter2, parameter3) VALUES ("' 
              + task.scriptName + '", "' + task.createdBy + '", "' + task.parameter1 + '", "'+ task.parameter2 + '", "'+ task.parameter3 + '")';
    model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'task.js>create',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'task.js>create',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'task.js>create', 
            data: results });
    });

    return deferred.promise;
};

module.exports.updateSetext2 = function(dn, status) {
    // Updates a single setext2 task for a specific dn
    var deferred = Q.defer();

    var model = Arrow.getModel('appc.mysql.eolmig/Task');
    var query = 'UPDATE Task SET status = "' + status + '" WHERE parameter1 = "' + dn + '"';
    model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'task.js>readSetext2',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'task.js>readSetext2',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'task.js>readSetext2', 
            data: results });
    });

    return deferred.promise;
};