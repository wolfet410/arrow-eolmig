// Library code specifically for position api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(position) {
    // // Writes a new position to the Position table
    var deferred = Q.defer();

    if (typeof position.sport.sportId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'position.js>create',
            data: 'Missing sportId in sport object' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Position');
    Model.create({ description: position.description, sportId: position.sport.sportId }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'position.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'position.js>create',
                data: results });
    });

    return deferred.promise;
};

module.exports.read = function(positionId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Position');
    var query = 'SELECT * FROM ViewPositionList WHERE positionId = ' + positionId + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'position.js>read', 
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'position.js>read',
                data: 'No results' });
            return deferred.promise;
        }
        var output = {
            positionId: results[0].positionId,
            description: results[0].description,
            sport: {
                sportId: results[0].sportId,
                description: results[0].sportDescription
            }
        };

        deferred.resolve({ success: true, status: 200, caller: 'position.js>read',
                data: output });
    });

    return deferred.promise;
};


module.exports.readAll = function() {
    // Gets a list of all positions via the Position table
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Position');
    var query = 'SELECT * FROM ViewPositionList'
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'position.js>readAll',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'position.js>readAll',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'position.js>readAll',
                data: results });
    });

    return deferred.promise;
};

module.exports.update = function(position) {
    // Updates existing position record
    var deferred = Q.defer();

    if (typeof position.sport.sportId === 'undefined') {
        deferred.reject({ status: 422, data: 'position.js>update:Missing sportId in sport object' });
        return;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Position');
    var query = 'UPDATE `Position` SET description = "' + position.description + '", sportId = ' + position.sport.sportId
              + ' WHERE positionId = ' + position.positionId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'position.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'position.js>update',
                data: position });
    });

    return deferred.promise;
};

module.exports.delete = function(position) {
    // // Deletes a record from the Position table
    var deferred = Q.defer();

    if (typeof position.positionId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'position.js>delete',
            data: 'Missing positionId' });
        return;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Position');
    var query = 'DELETE FROM `Position` WHERE positionId = ' + position.positionId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'position.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'position.js>delete',
                data: true });
    });

    return deferred.promise;
}
