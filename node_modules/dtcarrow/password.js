// Library code specifically for user api code
var Arrow = require('arrow'),
    Q = require('q'),
    PasswordHash = require('phpass').PasswordHash,
    Uuid = require('node-uuid'),
    Dtcarrow = require('dtcarrow');

module.exports.authenticate = function(email, password) {
    // Compares email address and password with values (hashed where appropriate) in the
    // User table
    var deferred = Q.defer();

    if (typeof email === 'undefined' || typeof password === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'password.js>authenticate', 
            data: 'Missing email or password' });
        return deferred.promise;
    }
    
    var User = Arrow.getModel('appc.mysql.eolmig/User');
    User.query({ email: email }, function(err, user) {
        if (err) {
        deferred.reject({ success: false, status: 500, caller: 'password.js>authenticate', 
            data: err });
        } else {
            if (user.length === 0) { 
                deferred.reject({ success: false, status: 401, caller: 'password.js>authenticate', 
                    data: 'Email address is incorrect or invalid password' });
                return deferred.promise;
            }

            if (user[0].enabled === 'false') {
                deferred.reject({ success: false, status: 403, caller: 'password.js>authenticate',
                    data: 'Account disabled' });
                return deferred.promise;
            }
            
            var passwordHash = new PasswordHash();
            var match = passwordHash.checkPassword(password, user[0].hash);
            if (!match) {
                deferred.reject({ success: false, status: 401, caller: 'password.js>authenticate',
                    data: 'Email address or password does not match' });
            }

            deferred.resolve({ success: true, status: 200, caller: 'password.js>authenticate',
                data: user });
        }
    });

    return deferred.promise;
};

module.exports.randomPassword = function() {
    // Creates a hashed random 12 digit password
    var password = this.newApikey().data.split('-')[4];

    var passwordHash = new PasswordHash();
    var hash = passwordHash.hashPassword(password);

    return { success: true, status: 200, caller: 'password.js>randomPassword', data: { password: password, hash: hash } };
};

module.exports.updatePassword = function(userId, password) {
    // Updates the User table with a hash of the entered password
    var deferred = Q.defer();

    if (typeof userId === 'undefined' || typeof password === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'password.js>updatePassword', 
            data: 'Missing userId or password' });
        return deferred.promise;
    }

    var passwordHash = new PasswordHash();
    var hash = passwordHash.hashPassword(password);

    if (hash.length < 48) {
        deferred.reject({ success: false, status: 500, caller: 'password.js>updatePassword',
            data: 'Hash length too short' });
        return deferred.promise;
    }

    // Updating password also creates a new apikey value
    var newApikey = this.newApikey();
    if (newApikey.data.length < 32) {
        deferred.reject({ success: false, status: 500, caller: 'password.js>updatePassword',
            data: 'Problems creating newApikey' });
        return deferred.promise;
    }

    var User = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'UPDATE User SET hash = "' + hash + '", apikey = "' + newApikey.data + '" WHERE userId = ' + userId;
    User.query( { customSqlQuery: query }, function(err, result) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'password.js>updatePassword',
                data: 'UPDATE query: ' + err });
        } else {
            deferred.resolve({ success: true, status: 204, caller: 'password.js>updatePassword',
                data: true });
        }
    });

    return deferred.promise;
};

module.exports.newApikey = function() {
    // Moved to the library to allow future customization
    return { success: true, status: 200, caller: 'password.js>newApikey',
                data: Uuid.v4() }
};
