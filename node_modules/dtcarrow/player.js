var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

module.exports.read = function(playerId) {
    var deferred = Q.defer();

    if (typeof playerId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'player.js>read', 
            data: 'Missing playerId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Player');
    var query = 'SELECT * FROM Player WHERE playerId = ' + playerId;

    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>read', data: err });
            return deferred.promise;
        }

        var q = 'SELECT * FROM PlayerImage WHERE playerId = ' + playerId + ' ORDER BY profile';
        Model.query({ customSqlQuery: q }, function(err, images) {

            if (err) {
                deferred.reject({ success: false, status: 500, caller: 'player.js>read>images', data: err });
                return deferred.promise;
            }

            results[0].images = images;
            deferred.resolve({ success: true, status: 200, caller: 'player.js>read>images', data: results[0] });
        });
    });

    return deferred.promise;
};


module.exports.readAll = function(sportId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Player');
    var query = 'SELECT * FROM Player'
    query += typeof sportId !== 'undefined' ? ' WHERE sportId = ' + sportId : '';
    query += ' ORDER BY lastName';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>readAll', data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'player.js>readAll', data: results });
    });

    return deferred.promise;
};

module.exports.addStatistics = function(player) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Player');
    var query = 'SELECT * FROM PlayerStatistic WHERE playerId = ' + player.playerId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>addStatistics', data: err });
            return deferred.promise;
        }

        player.statistics = results;

        deferred.resolve({ success: true, status: 200, caller: 'player.js>addStatistics', data: player });
    });

    return deferred.promise;
};

module.exports.getFollowed = function(req, player) {
    var deferred = Q.defer();

    Dtcarrow.Api.getPlayerCoachId(req, 'unknown')
        .then(function(getPlayerCoachIdResult) {
            if (getPlayerCoachIdResult.data.type === 'coach') {
                var Model = Arrow.getModel('appc.mysql.eolmig/CoachFollowPlayer');
                var query = 'SELECT * FROM CoachFollowPlayer WHERE coachId = ' + getPlayerCoachIdResult.data.id
                query += typeof player !== 'undefined' ? ' AND playerId = ' + player.playerId : '';

                Model.query({ customSqlQuery: query }, function(err, results) {
                    if (err) {
                        deferred.reject({ success: false, status: 500, caller: 'player.js>getFollowed', data: err });
                        return deferred.promise;
                    }

                    if (typeof player !== 'undefined' && results.length > 0) {
                        player.followed = true;
                        deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: player });
                        return deferred.promise;
                    } else if (typeof player !== 'undefined' && results.length <= 0) {
                        deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: player });
                        return deferred.promise;
                    } else {
                        deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: results });
                        return deferred.promise;
                    }
                });
            }
            if (getPlayerCoachIdResult.data.type === 'player') {
                // Temp code
                deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: player });
                return deferred.promise;

                // var Model = Arrow.getModel('appc.mysql.eolmig/CoachFollowPlayer');
                // var query = 'SELECT * FROM CoachFollowPlayer WHERE coachId = ' + getPlayerCoachIdResult.data
                // query += typeof player !== 'undefined' ? ' AND playerId = ' + player.playerId : '';

                // Model.query({ customSqlQuery: query }, function(err, results) {
                //     if (err) {
                //         deferred.reject({ success: false, status: 500, caller: 'player.js>getFollowed', data: err });
                //         return deferred.promise;
                //     }

                //     if (typeof player !== 'undefined' && results.length > 0) {
                //         player.followed = true;
                //         deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: player });
                //         return deferred.promise;
                //     } else if (typeof player !== 'undefined' && results.length <= 0) {
                //         deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: player });
                //         return deferred.promise;
                //     } else {
                //         deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowed', data: results });
                //         return deferred.promise;
                //     }
                // });
            }
        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>getFollowed', 
                data: err }); 
        });

    return deferred.promise;
};

module.exports.toggleFollowed = function(req, playerId) {
    var deferred = Q.defer();

    Dtcarrow.Api.getPlayerCoachId(req, 'coach')
        .then(function(getPlayerCoachIdResult) {
            var Model = Arrow.getModel('appc.mysql.eolmig/CoachFollowPlayer');
            var query = 'SELECT * FROM CoachFollowPlayer WHERE coachId = ' + getPlayerCoachIdResult.data
                + ' AND playerId = ' + playerId;
            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 500, caller: 'player.js>toggleFollowed', data: err });
                    return deferred.promise;
                }

                if (results.length > 0) {
                    query = 'DELETE FROM CoachFollowPlayer WHERE coachId = ' + getPlayerCoachIdResult.data 
                        + ' AND playerId = ' + playerId;
                    Model.query({ customSqlQuery: query }, function(err, results) {
                        if (err) {
                            deferred.reject({ success: false, status: 500, caller: 'player.js>toggleFollowed>DELETE', data: err });
                            return deferred.promise;
                        }

                        deferred.resolve({ success: true, status: 200, caller: 'player.js>toggleFollowed>DELETE', data: false });
                    });
                } else {
                    query = 'INSERT INTO CoachFollowPlayer (coachId, playerId) VALUES (' + getPlayerCoachIdResult.data 
                        + ', ' + playerId + ')';
                    Model.query({ customSqlQuery: query }, function(err, results) {
                        if (err) {
                            deferred.reject({ success: false, status: 500, caller: 'player.js>toggleFollowed>INSERT', data: err });
                            return deferred.promise;
                        }

                        deferred.resolve({ success: true, status: 200, caller: 'player.js>toggleFollowed>INSERT', data: true });
                    });
                }
            });

        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>toggleFollowed', 
                data: err }); 
        });

    return deferred.promise;
};

module.exports.getFollowing = function(req) {
    var deferred = Q.defer();

    Dtcarrow.Api.getPlayerCoachId(req, 'player')
        .then(function(getPlayerCoachIdResult) {
            var Model = Arrow.getModel('appc.mysql.eolmig/CoachFollowPlayer');
            var query = 'SELECT * FROM CoachFollowPlayer WHERE playerId = ' + getPlayerCoachIdResult.data;

            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 500, caller: 'player.js>getFollowing', data: err });
                    return deferred.promise;
                }

                deferred.resolve({ success: true, status: 200, caller: 'player.js>getFollowing',
                    data: results });
            });
        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>getFollowing', 
                data: err }); 
        });

    return deferred.promise;
};

module.exports.getSportId = function(req) {
    var deferred = Q.defer();

    Dtcarrow.Api.getPlayerCoachId(req, 'player')
        .then(function(getPlayerCoachIdResult) {
            var Model = Arrow.getModel('appc.mysql.eolmig/CoachFollowPlayer');
            var query = 'SELECT sportId FROM Player WHERE playerId = ' + getPlayerCoachIdResult.data + ' LIMIT 1';

            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 500, caller: 'player.js>getSportId', data: err });
                    return deferred.promise;
                }

                deferred.resolve({ success: true, status: 200, caller: 'player.js>getSportId',
                    data: results[0] });
            });
        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: 'player.js>getSportId', 
                data: err }); 
        });

    return deferred.promise;
};