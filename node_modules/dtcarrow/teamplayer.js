// Library code specifically for statistic api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

module.exports.teamPlayerIdAllowed = function(req) {
    // Confirms the authentcated user has rights to do things with the given teamPlayerId
    // Returns true if good
    var deferred = Q.defer();

    if (typeof req.headers['x-api-key'] === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'teamplayer.js>teamPlayerIdAllowed',
            data: 'Missing x-api-key header (clientApikey)' });
        return deferred.promise;
    }

    if (typeof req.params.teamPlayerId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'teamplayer.js>teamPlayerIdAllowed',
            data: 'Missing teamPlayerId' });
        return deferred.promise;
    }

    Dtcarrow.Api.getPlayerCoachId(req, 'player')
        .then(function(getPlayerCoachIdResult) {
            
            var Model = Arrow.getModel('appc.mysql.eolmig/TeamPlayer');
            var query = 'SELECT * FROM TeamPlayer WHERE teamPlayerId = ' + req.params.teamPlayerId
                      + ' AND playerId = ' + getPlayerCoachIdResult.data;
            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>teamPlayerIdAllowed',
                        data: err });
                    return deferred.promise;
                }

                if (typeof results === 'undefined' || results.length === 0) {
                    deferred.reject({ success: false, status: 403, caller: 'teamplayer.js>teamPlayerIdAllowed',
                        data: 'Authenticated user does not have access to teamPlayerId: ' + req.params.teamPlayerId });
                } else {
                    deferred.resolve({ success: false, status: 403, caller: 'teamplayer.js>teamPlayerIdAllowed',
                        data: true });
                }
            });
        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: '>teamplayer.js>teamPlayerIdAllowed', 
                data: err }); 
        });

    return deferred.promise;
};

// CRUD
module.exports.create = function(teamplayer) {
    // Writes a new record to the Teamplayer table
    var deferred = Q.defer();

    // Verifying inbound object
    var check = {
        teamId: 'string',
        playerId: 'string'
    }
    var checkedTeamPlayer = Dtcarrow.Common.checkObject(teamplayer, check);
    
    if (!checkedTeamPlayer) {
        deferred.reject({ success: false, status: 422, caller: 'teamplayer.js>create',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }        

    var Model = Arrow.getModel('appc.mysql.eolmig/TeamPlayer');
    Model.create(checkedTeamPlayer, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'teamplayer.js>create',
                data: results });
    });
 
    return deferred.promise;
};

module.exports.read = function(teamPlayerId) {
    // Gets a single teamplayer record set for a given teamPlayerId via the ViewTeamPlayerList view
    var deferred = Q.defer();

    if (typeof teamPlayerId === 'undefined') {
        deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>read',
            data: 'teamPlayerId parameter is missing' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/TeamPlayer');
    var query = 'SELECT * FROM ViewTeamPlayerList WHERE teamPlayerId = ' + teamPlayerId + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>read',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'teamplayer.js>read',
                data: 'No results' });
            return deferred.promise;
        }

        var output = {
            teamPlayerId: results[0].teamPlayerId,
            team: {
                teamId: results[0].teamId,
                name: results[0].teamName
            },
            sport: {
                sportId: results[0].sportId
            },
            position: {
                positionId: results[0].positionId,
                description: results[0].positionDescription
            },
            jerseyNumber: results[0].jerseyNumber
        };

        deferred.resolve({ success: true, status: 200, caller: 'teamplayer.js>read',
                data: output });
    });

    return deferred.promise;
};


module.exports.readAll = function(playerId) {
    // Gets a list of the first teamplayer record for a given playerId via the ViewTeamPlayerList view
    var deferred = Q.defer();
    if (typeof playerId !== 'number') {
        deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>readAll',
            data: 'playerId parameter is missing or not number' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/TeamPlayer');
    var query = 'SELECT * FROM ViewTeamPlayerList WHERE playerId = ' + playerId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>readAll',
                data: err });
            return deferred.promise;
        }

        // readAll only returns the first instance because there can only be one instance
        // as of the May, 2016 team/player relationship decision
        deferred.resolve({ success: true, status: 200, caller: 'teamplayer.js>readAll',
                data: results[0] });
    });

    return deferred.promise;
};

module.exports.update = function(teamPlayer) {
    // Updates existing teamPlayer record
    var deferred = Q.defer();

    var check = {
        teamPlayerId: 'string',
        position: {
            positionId: 'string'
        },
        jerseyNumber: 'string',
        playerId: 'string'
    }
    var checkedTeamPlayer = Dtcarrow.Common.checkObject(teamPlayer, check);
    if (!checkedTeamPlayer) {
        deferred.reject({ success: false, status: 422, caller: 'teamplayer.js>update',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/TeamPlayer');
    var query = 'UPDATE TeamPlayer SET positionId = ' + checkedTeamPlayer.position.positionId + ','
              + ' jerseyNumber = "' + checkedTeamPlayer.jerseyNumber + '"'
              + ' WHERE teamPlayerId = ' + checkedTeamPlayer.teamPlayerId 
              + ' AND playerId = ' + checkedTeamPlayer.playerId; 
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'teamplayer.js>update',
                data: results });
    });

    return deferred.promise;
};

module.exports.delete = function(teamPlayer) {
    // Deletes a record from the teamPlayer table
    var deferred = Q.defer();

    if (typeof teamPlayer.teamPlayerId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'teamplayer.js>delete',
            data: 'Missing teamPlayerId' });
        return deferred.promise;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/TeamPlayer');
    var query = 'DELETE FROM TeamPlayer WHERE teamPlayerId = ' + teamPlayer.teamPlayerId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'teamplayer.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'teamplayer.js>delete',
                data: true });
    });

    return deferred.promise;
}
