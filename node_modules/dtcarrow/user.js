// Library code specifically for user api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// Helpers
module.exports.userExists = function(userId) {
    // Verify user account we are modifying actually exists
    // Returns true if already exists, false if not
    var deferred = Q.defer();

    if (typeof userId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'user.js>userExists', 
            data: 'Missing userId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    Model.query({ userId: userId }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>userExists',
                data: err });
            return deferred.promise;
        }

        if (results.length !== 0) {
            deferred.resolve({ success: true, status: 200, caller: 'user.js>userExists',
                data: true });
        } else {
            deferred.resolve({ success: true, status: 200, caller: 'user.js>userExists',
                data: false });
        }       
    });

    return deferred.promise;
};

module.exports.emailExists = function(email) {
    // Checks if email address already exists
    // Returns true if it does, false if it doesn't

    var deferred = Q.defer();

    if (typeof email === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'user.js>emailExists', 
            data: 'Missing email parameter' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    Model.query({ email: email }, function(err, r) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>emailExists',
                data: err });
            return deferred.promise;
        }

        if (r.length === 0) {
            // newEmail does not already exist in the User table
            deferred.resolve({ success: true, status: 200, caller: 'user.js>emailExists',
                data: false });
        } else {
            // newEmail does exist in the user table
            deferred.resolve({ success: true, status: 200, caller: 'user.js>emailExists',
                data: true });
        }       
    });

    return deferred.promise;
};

module.exports.getDetails = function(req, apikey) { 
    var deferred = Q.defer();

    if (typeof apikey === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'user.js>getDetails',
                data: 'Missing apikey' });
            return deferred.promise;
    }

    var Model = Arrow.getModel('reducedUser');

    Model.query({ apikey: apikey.apikey }, function(err, userresults) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>getDetails',
                data: err });
            return deferred.promise;
        }

        if (typeof userresults === 'undefined' || userresults.length === 0) {
            deferred.reject({ success: false, status: 404, caller: 'user.js>getDetails',
                data: 'No userresults' });
            return deferred.promise;
        }

        if (userresults[0].userId === 1) {
            deferred.reject({ success: false, status: 422, caller: 'user.js>getDetails',
                data: 'Bad internalapi@gkn.com user returned in results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'user.js>getDetails', 
            data: userresults[0] });
    });

    return deferred.promise;
}

// CRUD
module.exports.create = function(user) {
    // Writes a new user to the User table
    // Note, this module is only one small part of the entire user creation process!
    var deferred = Q.defer();
    
    var checks = [ 'email', 'apikey' ];
    var l = checks.length;
    for (var i = 0; i < l; i++) {
        if (typeof user[checks[i]] === 'undefined') {
            deferred.reject({ success: false, status: 404, caller: 'user.js>create',
                data: 'Missing object property: ' + checks[i] });
            return deferred.promise;
        }
    }

    if (typeof user.password === 'undefined' || typeof user.password.hash === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'user.js>create',
            data: 'missing object property: password.hash' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    Model.create({ email: user.email, enabled: 'true', hash: user.password.hash, apikey: user.apikey }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>create', 
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'user.js>create', 
            data: results });
    });

    return deferred.promise;
};

module.exports.read = function(userId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    Model.query({ userId: userId }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>read', 
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'user.js>read',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'user.js>read', 
            data: results });
    });

    return deferred.promise;
};


module.exports.readAll = function() {
    // Gets a list of all users via the ViewUserList view
    var deferred = Q.defer();

    var viewModel = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'SELECT * FROM User'
    viewModel.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>readAll',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'user.js>readAll',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'user.js>readAll', 
            data: results });
    });

    return deferred.promise;
};

module.exports.update = function(user) {
    // Updates existing user record
    var deferred = Q.defer();

    if (typeof user.userId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'user.js>update',
            data: 'Missing userId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'UPDATE User SET email = "' + user.email + '", enabled = "' + user.enabled + '" WHERE userId = ' + user.userId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'user.js>update',
                data: user });
    });

    return deferred.promise;
};

module.exports.delete = function(user) {
    // Deletes a record from the User table
    var deferred = Q.defer();

    // Find the user's type and save that as the table name
    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'DELETE FROM User WHERE userId = ' + user.userId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'user.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'user.js>delete',
            data: user });
    });

    return deferred.promise;
}
