// Library code specifically for location api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(location) {
    // Writes a new location to the Location table
    var deferred = Q.defer();

    var check = {
        name: 'string',
        address: 'string', 
        city: 'string', 
        state: 'string', 
        zip: 'string'
    }
    var checkedLocation = Dtcarrow.Common.checkObject(location, check);
    if (!checkedLocation) {
        deferred.reject({ success: false, status: 422, caller: 'location.js>create',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Location');
    Model.create(checkedLocation, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'location.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'location.js>create',
                data: results });
    });

    return deferred.promise;
};

module.exports.read = function(locationId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Location');
    var query = 'SELECT * FROM Location WHERE locationId = ' + locationId + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'location.js>read', 
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'location.js>read',
                data: 'No results' });
            return deferred.promise;
        }
        var output = {
            name: results[0].name,
            locationId: results[0].locationId,
            address: results[0].address,
            city: results[0].city,
            state: results[0].state,
            zip: results[0].zip
        };

        deferred.resolve({ success: true, status: 200, caller: 'location.js>read',
                data: output });
    });

    return deferred.promise;
};


module.exports.readAll = function() {
    // Gets a list of all locations via the Location table
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Location');
    var query = 'SELECT * FROM Location'
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'location.js>readAll',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'location.js>readAll',
                data: results });
    });

    return deferred.promise;
};

module.exports.update = function(location) {
    // Updates existing location record
    var deferred = Q.defer();

    var check = {
        locationId: 'string',
        name: 'string',
        address: 'string', 
        city: 'string', 
        state: 'string', 
        zip: 'string'
    }
    var checkedLocation = Dtcarrow.Common.checkObject(location, check);
    if (!checkedLocation) {
        nextOutput.status = 422;
        nextOutput.data = 'Inbound object does not match expectations!';
        deferred.reject({ success: false, status: 422, caller: 'location.js>create',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Location');
    var query = 'UPDATE `Location` SET name = "' + location.name + '", address = "' + location.address
              + '", city = "' + location.city + '", state = "' + location.state
              + '", zip = "' + location.zip
              + '" WHERE locationId = ' + location.locationId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'location.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'location.js>update',
                data: location });
    });

    return deferred.promise;
};

module.exports.delete = function(location) {
    // // Deletes a record from the Location table
    var deferred = Q.defer();

    if (typeof location.locationId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'location.js>delete',
            data: 'Missing locationId' });
        return;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Location');
    var query = 'DELETE FROM `Location` WHERE locationId = ' + location.locationId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'location.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'location.js>delete',
                data: true });
    });

    return deferred.promise;
}
