// Library code specifically for location api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(playerId, event) {
    // Writes a new event to the Event table and a relationship to the PlayerEvent table
    var deferred = Q.defer();

    if (typeof playerId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'playerevent.js>create',
                data: 'Missing playerId' });
        return deferred.promise;
    }

    var check = {
        locationId: 'string',
        sectionId: 'string',
        description: 'string',
        dateTime: 'string'
    }
    var checkedEvent = Dtcarrow.Common.checkObject(event, check);
    if (!checkedEvent) {
        deferred.reject({ success: false, status: 422, caller: 'playerevent.js>create',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Event');
    Model.create(checkedEvent, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerevent.js>create',
                data: err });
            return deferred.promise;
        }

        var query = 'INSERT INTO `PlayerEvent` (`playerId`,`eventId`) VALUES (' + playerId + ',' + results.id + ')';
        Model.query({ customSqlQuery: query }, function(peErr, peResults) {
            if (err) {
                deferred.reject({ success: false, status: 500, caller: 'playerevent.js>PlayerEvent>create',
                    data: peErr });
                return deferred.promise;
            }

            deferred.resolve({ success: true, status: 201, caller: 'playerevent.js>PlayerEvent>create',
                data: peResults });
        })
    });

    return deferred.promise;
};

module.exports.read = function(eventId) {
    var deferred = Q.defer();

    if (typeof eventId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'playerevent.js>read',
                data: 'Missing eventId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/ViewEventPlayer');
    var query = 'SELECT * FROM ViewEventPlayer WHERE eventId = ' + eventId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerevent.js>read',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'playerevent.js>read',
                data: results });
    });


    return deferred.promise;
};

module.exports.readAll = function(playerId) {
    var deferred = Q.defer();

    if (typeof playerId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'playerevent.js>readAll',
                data: 'Missing playerId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/ViewEventPlayer');
    var query = 'SELECT *, DATE_FORMAT(dateTime, "%Y-%m-%d") AS filterByDate FROM ViewEventPlayer WHERE playerId = ' + playerId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerevent.js>readAll',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'playerevent.js>readAll',
                data: results });
    });

    return deferred.promise;
};

// module.exports.update = function(location) {
//     // Updates existing location record
//     var deferred = Q.defer();

//     var check = {
//         locationId: 'string',
//         name: 'string',
//         address: 'string', 
//         city: 'string', 
//         state: 'string', 
//         zip: 'string'
//     }
//     var checkedLocation = Dtcarrow.Common.checkObject(location, check);
//     if (!checkedLocation) {
//         nextOutput.status = 422;
//         nextOutput.data = 'Inbound object does not match expectations!';
//         deferred.reject({ success: false, status: 422, caller: 'location.js>create',
//             data: 'Inbound object does not match expectations' });
//         return deferred.promise;
//     }

//     var Model = Arrow.getModel('appc.mysql.eolmig/Location');
//     var query = 'UPDATE `Location` SET name = "' + location.name + '", address = "' + location.address
//               + '", city = "' + location.city + '", state = "' + location.state
//               + '", zip = "' + location.zip
//               + '" WHERE locationId = ' + location.locationId;
//     Model.query({ customSqlQuery: query }, function(err, results) {
//         if (err) {
//             deferred.reject({ success: false, status: 500, caller: 'location.js>update',
//                 data: err });
//             return deferred.promise;
//         }

//         deferred.resolve({ success: true, status: 200, caller: 'location.js>update',
//                 data: location });
//     });

//     return deferred.promise;
// };

// module.exports.delete = function(location) {
//     // // Deletes a record from the Location table
//     var deferred = Q.defer();

//     if (typeof location.locationId === 'undefined') {
//         deferred.reject({ success: false, status: 422, caller: 'location.js>delete',
//             data: 'Missing locationId' });
//         return;   
//     }

//     var Model = Arrow.getModel('appc.mysql.eolmig/Location');
//     var query = 'DELETE FROM `Location` WHERE locationId = ' + location.locationId;
//     Model.query({ customSqlQuery: query }, function(err, rs) {
//         if (err) {
//             deferred.reject({ success: false, status: 500, caller: 'location.js>delete',
//                 data: err });
//             return deferred.promise;
//         }

//         deferred.resolve({ success: true, status: 204, caller: 'location.js>delete',
//                 data: true });
//     });

//     return deferred.promise;
// }
