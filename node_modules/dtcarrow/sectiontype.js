// Library code specifically for section type api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(sectionType) {
    // // Writes a new section type to the SectionType table
    var deferred = Q.defer();

    var check = {
        description: 'string',
    }
    var checkedSectionType = Dtcarrow.Common.checkObject(req.params, check);
    if (!checkedSectionType) {
        deferred.reject({ success: false, status: 422, caller: 'sectiontype.js>create',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/SectionType');
    Model.create(checkedSectionType, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'sectiontype.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'sectiontype.js>create',
                data: results });
    });

    return deferred.promise;
};

module.exports.read = function(sectionTypeId) {
    var deferred = Q.defer();

    if (typeof sectionTypeId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'sectiontype.js>create',
            data: 'Missing sectionTypeId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/SectionType');
    var query = 'SELECT * FROM SectionType WHERE sectionTypeId = ' + sectionTypeId + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'sectiontype.js>read', 
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'sectiontype.js>read',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'sectiontype.js>read',
                data: results });
    });

    return deferred.promise;
};


module.exports.readAll = function() {
    // Gets a list of all sections via the Section table
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/SectionType');
    var query = 'SELECT * FROM SectionType'
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'sectiontype.js>readAll',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'sectiontype.js>readAll',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'sectiontype.js>readAll',
                data: results });
    });

    return deferred.promise;
};

module.exports.update = function(sectionType) {
    // Updates existing sectionType record
    var deferred = Q.defer();

    var check = {
        sectionTypeId: 'string',
        description: 'string'
    }
    var checkedSectionType = Dtcarrow.Common.checkObject(sectionType, check);
    if (!checkedSectionType) {
        deferred.reject({ success: false, status: 422, caller: 'sectiontype.js>update',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/SectionType');
    var query = 'UPDATE Section SET description = "' + checkedSectionType.description +
              + ' WHERE sectionTypeId = ' + checkedSectionType.sectionTypeId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'sectiontype.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'sectiontype.js>update',
                data: section });
    });

    return deferred.promise;
};

module.exports.delete = function(sectionType) {
    // // Deletes a record from the Section table
    var deferred = Q.defer();

    if (typeof sectionType.sectionTypeId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'sectiontype.js>delete',
            data: 'Missing sectionTypeId' });
        return;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/SectionType');
    var query = 'DELETE FROM SectionType WHERE sectionTypeId = ' + sectionType.sectionTypeId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'sectiontype.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'sectiontype.js>delete',
                data: true });
    });

    return deferred.promise;
}
