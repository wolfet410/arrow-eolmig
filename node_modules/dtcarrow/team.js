// Library code specifically for team api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(team) {
    // // Writes a new team to the Team table
    var deferred = Q.defer();

    if (typeof team.sport.sportId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'team.js>create',
            data: 'Missing sportId in sport object' });
        return;
    }

    if (typeof team.organization.organizationId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'team.js>create',
            data: 'Missing organizationId in organization object' });
        return;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Team');
    Model.create({ name: team.name, sportId: team.sport.sportId, 
        organizationId: team.organization.organizationId }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'team.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'team.js>create', 
            data: results });
    });

    return deferred.promise;
};

module.exports.read = function(teamId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Team');
    var query = 'SELECT * FROM ViewTeamList WHERE teamId = ' + teamId + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'team.js>read',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'team.js>read',
                data: 'No results' });
            return deferred.promise;
        }
        var output = {
            teamId: results[0].teamId,
            name: results[0].teamName,
            sport: {
                sportId: results[0].sportId,
                description: results[0].sportDescription
            },
            organization: {
                organizationId: results[0].organizationId,
                description: results[0].organizationDescription
            }
        };

        deferred.resolve({ success: true, status: 200, caller: 'team.js>read', 
            data: output });
    });

    return deferred.promise;
};


module.exports.readAll = function() {
    // Gets a list of all teams via the ViewTeamList view
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Team');
    var query = 'SELECT * FROM ViewTeamList'
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'team.js>readAll',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'team.js>readAll',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'team.js>readAll',
                data: results });
    });

    return deferred.promise;
};

module.exports.update = function(team) {
    // Updates existing team record
    var deferred = Q.defer();

    if (typeof team.sport.sportId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'team.js>update',
            data: 'Missing sportId in sport object' });
        return;
    }

    if (typeof team.organization.organizationId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'team.js>update',
            data: 'Missing organizationId in organization object' });
        return;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'UPDATE Team SET name = "' + team.name + '", sportId = ' + team.sport.sportId + ', organizationId = '
              + team.organization.organizationId + ' WHERE teamId = ' + team.teamId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'team.js>update',
                data:  err });
            return deferred.promise;
        }

        deferred.resolve(team);
    });

    return deferred.promise;
};

module.exports.delete = function(team) {
    // // Deletes a record from the Team table
    var deferred = Q.defer();

    if (typeof team.teamId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'team.js>delete',
            data: 'Missing teamId' });
        return;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'DELETE FROM Team WHERE teamId = ' + team.teamId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'team.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'team.js>delete',
                data: true });
    });

    return deferred.promise;
}
