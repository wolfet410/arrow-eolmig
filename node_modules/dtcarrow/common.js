// Common library code shared amongst any API
var Dtcarrow = require('dtcarrow'),
    Q = require('q'),
    Nodemailer = require('nodemailer'),
    SmtpTransport = require('nodemailer-smtp-transport'),
    _ = require('lodash');


module.exports.arrayValueMatch = function(firsts, seconds) {
	// Compares two arrays and returns true if a value of firsts array exists
	// in seconds array
	// Adapted from http://stackoverflow.com/questions/12433604/how-can-i-find-matching-values-in-two-arrays
    if (typeof firsts !== 'array' || typeof seconds !== 'array') {
        return { success: false, status: 500, caller: 'common.js>arrayValueMatch', data: 'Bad array inputs' };   
    }
    var sfirsts = firsts.concat().sort(),
    	sseconds = seconds.concat().sort(),
    	i1 = 0,
    	i2 = 0;

    while (i1 < firsts.length && i2 < seconds.length) {
        if (sfirsts[i1] === sseconds[i2]) {
        	// We found a match, done!
            return { success: true, status: 200, caller: 'common.js>arrayValueMatch', data: true };   
        } else if(sfirsts[i1] < sseconds[i2]) {
            i1++;
        } else {
            i2++;
        }
    }
    
    // No match
    return { success: true, status: 200, caller: 'common.js>arrayValueMatch', data: false };   
};

module.exports.nextFail = function(base, output) {
    // Adds options to the standard Arrow next function, allowing the APIs to quickly
    // present status and messages to the caller
    
    // Converting JS errors to output object
    if (typeof output !== 'object' || typeof output.data === 'undefined') {
        var s = output.toString(); // Convers JS errors to string
        output = {
            data: s,
            status: 500
        }        
    }

    if (typeof base !== 'undefined') {
        if (typeof base.resp !== 'undefined') {
            if (typeof base.resp.response !== 'undefined') {
                if (typeof base.resp.response.status !== 'undefined') {
                    base.resp.response.status(output.status);    
                }
            }
        }
    }

    // This masks some error messages, so remarking it out for now
    // if (typeof output.data === 'object') {
    //     output.data = JSON.stringify(output.data);
    // }

    if (typeof output.data === 'string') { var s = output.data.substring(0, 1000); } else { s = output.data; }
    Dtcarrow.Common.log('FAIL:' + output.caller + ',status:' + output.status + ',message:' + s);
    base.resp.send({ message: output.data });
    base.next(false);
}

module.exports.nextSuccess = function(base, output) {
    // Adds options to the standard Arrow next function, allowing the APIs to quickly
    // send non-standard statuses and data to the caller
    if (typeof base.resp.response !== 'undefined') {
        if (typeof base.resp.response.status !== 'undefined') {
            base.resp.response.status(output.status);    
        }
    }

    var s = (typeof output.data === 'object') ? JSON.stringify(output.data) : output.data;
    if (typeof s === 'string') { s = s.substring(0, 1000); }

    Dtcarrow.Common.log('SUCCESS:' + output.caller + ',status:' + output.status + ',message:' + s);
    base.next(null, output.data);
}

module.exports.log = function(msg) {
	// Messages only sent while debugging
    if (Dtcarrow.Constants.DEBUGLOGGING) {
		console.warn(Date() + ',' + 'DEBUG,' + msg);
	}
}

module.exports.warn = function(msg) {
    // Messages sent while debugging or in production
    // Used as an additional message (above the debug messages sent during nextFail & nextSuccess), to add additional alerts 
    // under very bad circumstances that need to be seen even during production
    console.warn(Date() + ',' + 'WARN,' + msg);
}


module.exports.sendEmail = function(to, subject, body) {
    var deferred = Q.defer();
    if (typeof Dtcarrow.Constants.MAILSERVER === 'undefined' || 
            typeof Dtcarrow.Constants.SMTPPORT === 'undefined') {
        deferred.reject({ success: false, status: 500, caller: 'common.js>sendEmail', 
            data: 'Missing MAILSERVER or SMTPPORT constants in Dtcarrow.Constants' });
    }

    var transporter = Nodemailer.createTransport(SmtpTransport({
            host: Dtcarrow.Constants.MAILSERVER,
            port: Dtcarrow.Constants.SMTPPORT
        }));

    // Verify to is an email address
    // This will catch the most obvious errors, but does not guarantee the email address is valid
    // Whether the email address is truly valid will be determined when the email message is sent
    var rx = /\S+@\S+\.\S+/;
    if (!rx.test(to)) {
        deferred.reject({ success: false, status: 422, caller: 'common.js>sendEmail', 
            data: 'Invalid email address:' + to });
        return deferred.promise;
    }

    transporter.sendMail({
        from: Dtcarrow.Constants.FROM,
        to: to,
        subject: subject,
        html: body
    }, function(err, response){
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'common.js>sendMail', data: err });
        }
        deferred.resolve({ success: true, status: 200, caller: 'common.js>sendMail', data: true });
    });

    return deferred.promise;
}

module.exports.checkObject = function(object, check) {
    // Checks an object for proper elements.
    // object: the object to be checked
    // check: an example object, whose values represent the type of value that should exist in object
    // Returns the object on success, and false on failure
    var a = _.keys(check);
    var l = a.length;
    for (var i = 0; i < l; i++) {
        var key = a[i];

        // Converting any number types to strings to simplify checks
        object[key] = typeof object[key] === 'number' ? object[key].toString() : object[key];
        
        if (typeof object[key] !== check[key]) {
            if (typeof check[key] === 'object') {
                // Go deeper
                if (typeof object[key] === 'undefined') {
                    Dtcarrow.Common.log('common.js>checkObject, mismatch: ' + key 
                        + ' is undefined and should be an object');
         
                    return false;
                }
                var d = Dtcarrow.Common.checkObject(object[key], check[key]);
                if (d === false) {
                    return false;
                }
            } else {
                // We have a mismatch, alert the caller
                Dtcarrow.Common.log('common.js>checkObject, mismatch: ' + key 
                    + ' should be ' + check[key] + ', but typeof returned ' + typeof object[key]);
                return false;
            }
        }
    };

    // The object checks out if we are still here
    return object;
}