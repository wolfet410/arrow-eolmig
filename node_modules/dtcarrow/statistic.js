// Library code specifically for statistic api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(statistic) {
    // // Writes a new statistic to the Statistic table
    var deferred = Q.defer();

    if (typeof statistic.sport.sportId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'statistic.js>update',
            data: 'Missing sportId in sport object' });
        return deferred.promise;
    }

    if (typeof statistic.measurement.measurementId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'statistic.js>update',
            data: 'Missing measurementId in measurement object' });
        return deferred.promise;
    }
    var Model = Arrow.getModel('appc.mysql.eolmig/Statistic');
    var newstat = {
        description: statistic.description,
        sportId: statistic.sport.sportId,
        measurementId: statistic.measurement.measurementId,
        lower: statistic.lower,
        upper: statistic.upper,
        allowFilter: 'true', // Forcing default, admins should not create stats that can't be filtered
        required: 'false' // Forcing default, admins should not create stats that are required
    };
    Model.create(newstat, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'statistic.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'statistic.js>create',
                data: results });
    });

    return deferred.promise;
};

module.exports.read = function(statisticId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Statistic');
    var query = 'SELECT * FROM ViewStatisticList WHERE statisticId = ' + statisticId + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'statistic.js>read', 
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'statistic.js>read',
                data: 'No results' });
            return deferred.promise;
        }
        var output = {
            statisticId: results[0].statisticId,
            description: results[0].description,
            sport: {
                sportId: results[0].sportId,
                description: results[0].sportDescription
            },
            measurement: {
                measurementId: results[0].measurementId,
                descriptionPlural: results[0].measurementDescriptionPlural
            },
            lower: results[0].lower,
            upper: results[0].upper
        };

        deferred.resolve({ success: true, status: 200, caller: 'statistic.js>read',
                data: output });
    });

    return deferred.promise;
};


module.exports.readAll = function(required) {
    // Gets a list of all statistics via the ViewStatisticList view
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Statistic');
    var query = 'SELECT * FROM ViewStatisticList';
    query += required ? ' WHERE required = "true"' : '';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'statistic.js>readAll',
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'statistic.js>readAll',
                data: 'No results' });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'statistic.js>readAll',
                data: results });
    });

    return deferred.promise;
};

module.exports.update = function(statistic) {
    // Updates existing statistic record
    var deferred = Q.defer();

    if (typeof statistic.sport.sportId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'statistic.js>update',
            data: 'Missing sportId in sport object' });
        return deferred.promise;
    }

    if (typeof statistic.measurement.measurementId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'statistic.js>update',
            data: 'Missing measurementId in measurement object' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Statistic');
    var query = 'UPDATE Statistic SET description = "' + statistic.description + '", sportId = ' + statistic.sport.sportId
              + ', measurementId = ' + statistic.measurement.measurementId + ', upper = ' + statistic.upper
              + ', lower = ' + statistic.lower
              + ' WHERE statisticId = ' + statistic.statisticId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'statistic.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'statistic.js>update',
                data: results });
    });

    return deferred.promise;
};

module.exports.delete = function(statistic) {
    // // Deletes a record from the Statistic table
    var deferred = Q.defer();

    if (typeof statistic.statisticId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'statistic.js>delete',
            data: 'Missing statisticId' });
        return;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/User');
    var query = 'DELETE FROM Statistic WHERE statisticId = ' + statistic.statisticId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'statistic.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'statistic.js>delete',
                data: true });
    });

    return deferred.promise;
}
