var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow'),
    fs = require('fs');

module.exports.create = function(playerId, file) {
    var deferred = Q.defer();

console.warn('create', file);

    fs.readFile(file, function (err, data) {
        if (err) {
            deferred.reject({ success: false, status: 422, caller: 'image.js>create>readFile', data: err });
            return deferred.promise;
        } else {
            var encoded = new Buffer(data).toString('base64');

            var fileType = file.split('.').pop();
            encoded = 'data:image/' + fileType + ';base64,' + encoded;

            var Model = Arrow.getModel('appc.mysql.eolmig/PlayerImage');
            var query = 'INSERT INTO PlayerImage (playerId, profile, image) VALUES (' + playerId + ', "false", "' + encoded + '")'; 
            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 422, caller: 'image.js>create>create',
                        data: err });
                    return deferred.promise;
                }

                deferred.resolve({ success: true, status: 201, caller: 'image.js>create',
                        data: true });
            });
        }
    });

    return deferred.promise;
};

module.exports.readAll = function(playerId) {
    // Note there are APIs that make this query directly to get the image data, without using this method
    // so changes here may not always take affect as expected
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/PlayerImage');

    // ORDER BY profile is a quick and dirty way to push the profile picture to the top of the array of pictures
    // (true comes before false)
    var query = 'SELECT * FROM PlayerImage WHERE PlayerId = ' + playerId + ' ORDER BY profile'; 
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 422, caller: 'image.js>readAll',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'image.js>readAll',
                data: results });
    });

    return deferred.promise;
};
