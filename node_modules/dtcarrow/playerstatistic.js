// Library code specifically for playerstatistic api code
var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

// CRUD
module.exports.create = function(playerId, statistic) {
    // Writes a new statistic for a given playerId
    var deferred = Q.defer();

    if (typeof playerId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'playerstatistic.js>create',
                data: 'Missing playerId' });
            return deferred.promise;
    }

    var check = {
        statisticId: 'string'
    }
    var checkedStatistic = Dtcarrow.Common.checkObject(statistic, check);
    if (!checkedStatistic || (typeof checkedStatistic.value === 'undefined' && typeof checkedStatistic.textValue === 'undefined')) {
        deferred.reject({ success: false, status: 422, caller: 'playerstatistic.js>create',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/PlayerStatistic');
    var newstat = {
        playerId: playerId,
        statisticId: checkedStatistic.statisticId,
        value: checkedStatistic.value,
        textValue: checkedStatistic.textValue
    };
    Model.create(newstat, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerstatistic.js>create',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 201, caller: 'playerstatistic.js>create',
                data: results });
    });

    return deferred.promise;
};

module.exports.read = function(playerStatisticId) {
    var deferred = Q.defer();

    if (typeof playerStatisticId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'playerstatistic.js>read',
            data: 'Missing playerStatisticId' });
        return deferred.promise;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/PlayerStatistic');
    var query = 'SELECT * FROM PlayerStatistic WHERE playerStatisticId = ' + playerStatisticId 
              + ' LIMIT 1';
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerstatistic.js>read', 
                data: err });
            return deferred.promise;
        }

        if (typeof results === 'undefined' || results.length === 0) {
            deferred.reject({ success: false, status: 422, caller: 'playerstatistic.js>read',
                data: 'No results' });
            return deferred.promise;
        }
        var output = {
            playerStatisticId: results[0].playerStatisticId,
            playerId: results[0].playerId,
            statistic: {
                statisticId: results[0].statisticId,
                description: results[0].statisticDescription
            },
            value: results[0].value,
            textValue: results[0].textValue
        };

        deferred.resolve({ success: true, status: 200, caller: 'playerstatistic.js>read',
                data: output });
    });

    return deferred.promise;
};

module.exports.readAll = function(playerId) {
    var deferred = Q.defer();

    if (typeof playerId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'playerstatistic.js>readAll',
                data: 'Missing playerId' });
            return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Statistic');
    var query = 'SELECT * FROM PlayerStatistic WHERE playerId = ' + playerId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerstatistic.js>readAll',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'playerstatistic.js>readAll',
                data: results });
    });

    return deferred.promise;
};

module.exports.update = function(PlayerStatistic) {
    // Updates existing PlayerStatistic record
    var deferred = Q.defer();

    var check = {
        statisticId: 'string',
        PlayerStatisticId: 'string'
    }
    var checkedStatistic = Dtcarrow.Common.checkObject(PlayerStatistic, check);
    if (!checkedStatistic || (typeof checkedStatistic.value === 'undefined' && typeof checkedStatistic.textValue === 'undefined')) {
        deferred.reject({ success: false, status: 422, caller: 'playerstatistic.js>update',
            data: 'Inbound object does not match expectations' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/PlayerStatistic');
    var query = 'UPDATE PlayerStatistic SET statisticId = ' + checkedStatistic.statisticId + ', value = "' + checkedStatistic.value
              + '", textValue = "' + checkedStatistic.textValue
              + '" WHERE PlayerStatisticId = ' + checkedStatistic.PlayerStatisticId;
    Model.query({ customSqlQuery: query }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerstatistic.js>update',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'playerstatistic.js>update',
                data: results });
    });

    return deferred.promise;
};

module.exports.delete = function(playerStatistic) {
    // Deletes a record from the playerStatistic table
    var deferred = Q.defer();

    if (typeof playerStatistic.playerStatisticId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'playerstatistic.js>delete',
            data: 'Missing PlayerStatisticId' });
        return deferred.promise;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/PlayerStatistic');
    var query = 'DELETE FROM PlayerStatistic WHERE PlayerStatisticId = ' + playerStatistic.playerStatisticId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerstatistic.js>delete',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'playerstatistic.js>delete',
                data: true });
    });

    return deferred.promise;
}

module.exports.deletePlayer = function(player) {
    // Deletes all records for a given player
    var deferred = Q.defer();

    if (typeof player.playerId === 'undefined') {
        deferred.reject({ success: false, status: 422, caller: 'playerstatistic.js>deletePlayer',
            data: 'Missing playerId' });
        return deferred.promise;   
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/PlayerStatistic');
    var query = 'DELETE FROM PlayerStatistic WHERE playerId = ' + player.playerId;
    Model.query({ customSqlQuery: query }, function(err, rs) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'playerstatistic.js>deletePlayer',
                data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 204, caller: 'playerstatistic.js>deletePlayer',
                data: true });
    });

    return deferred.promise;
}