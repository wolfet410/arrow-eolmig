var Arrow = require('arrow'),
    Q = require('q'),
    Dtcarrow = require('dtcarrow');

module.exports.read = function(coachId) {
    var deferred = Q.defer();

    if (typeof coachId === 'undefined') {
        deferred.reject({ success: false, status: 404, caller: 'coach.js>read', data: 'Missing coachId' });
        return deferred.promise;
    }

    var Model = Arrow.getModel('appc.mysql.eolmig/Coach');
    var query = 'SELECT * FROM Coach WHERE coachId = ' + coachId + ' LIMIT 1';

    Model.query({ customSqlQuery: query }, function(err, coachDetails) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'coach.js>read', data: err });
            return deferred.promise;
        }

        deferred.resolve({ success: true, status: 200, caller: 'coach.js>read', 
            data: coachDetails[0] });
    });

    return deferred.promise;
};

module.exports.readAll = function(sportId) {
    var deferred = Q.defer();

    var Model = Arrow.getModel('appc.mysql.eolmig/Coach');
    Model.query({ sportId: sportId }, function(err, results) {
        if (err) {
            deferred.reject({ success: false, status: 500, caller: 'coach.js>readAll', data: err });
        }

        deferred.resolve({ success: true, status: 200, caller: 'coach.js>readAll', data: results });
    });

    return deferred.promise;
};

module.exports.getFollowed = function(req, coach) {
    var deferred = Q.defer();
    Dtcarrow.Api.getPlayerCoachId(req, 'player')
        .then(function(getPlayerCoachIdResult) {
            var Model = Arrow.getModel('appc.mysql.eolmig/PlayerFollowCoach');
            var query = 'SELECT * FROM PlayerFollowCoach WHERE coachId = ' + coach.coachId 
                      + ' AND playerId = ' + getPlayerCoachIdResult.data;

            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 500, caller: 'coach.js>getFollowed', data: err });
                    return deferred.promise;
                }

                var output = JSON.parse(JSON.stringify(coach));
                if (results.length > 0) {
                    output.followed = true;
                }

                deferred.resolve({ success: true, status: 200, caller: 'coach.js>getFollowed', data: output });
            });
        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: 'coach.js>getFollowed', 
                data: err }); 
        });

    return deferred.promise;
};

module.exports.toggleFollowed = function(req, coachId) {
    var deferred = Q.defer();

    Dtcarrow.Api.getPlayerCoachId(req, 'player')
        .then(function(getPlayerCoachIdResult) {
            var Model = Arrow.getModel('appc.mysql.eolmig/PlayerFollowCoach');
            var query = 'SELECT * FROM PlayerFollowCoach WHERE playerId = ' + getPlayerCoachIdResult.data
                + ' AND coachId = ' + coachId;

            Model.query({ customSqlQuery: query }, function(err, results) {
                if (err) {
                    deferred.reject({ success: false, status: 500, caller: 'coach.js>toggleFollowed', data: err });
                    return deferred.promise;
                }

                if (results.length > 0) {
                    query = 'DELETE FROM PlayerFollowCoach WHERE playerId = ' + getPlayerCoachIdResult.data 
                        + ' AND coachId = ' + coachId;
                    Model.query({ customSqlQuery: query }, function(err, results) {
                        if (err) {
                            deferred.reject({ success: false, status: 500, caller: 'coach.js>toggleFollowed>DELETE', data: err });
                            return deferred.promise;
                        }

                        deferred.resolve({ success: true, status: 200, caller: 'coach.js>toggleFollowed>DELETE', data: false });
                    });
                } else {
                    query = 'INSERT INTO PlayerFollowCoach (playerId, coachId) VALUES (' + getPlayerCoachIdResult.data 
                        + ', ' + coachId + ')';
                    Model.query({ customSqlQuery: query }, function(err, results) {
                        if (err) {
                            deferred.reject({ success: false, status: 500, caller: 'coach.js>toggleFollowed>INSERT', data: err });
                            return deferred.promise;
                        }

                        deferred.resolve({ success: true, status: 200, caller: 'coach.js>toggleFollowed>INSERT', data: true });
                    });
                }
            });

        })
        .done(null, function(err) {
            deferred.reject({ success: false, status: 500, caller: 'coach.js>toggleFollowed', 
                data: err }); 
        });

    return deferred.promise;
};
